//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.5.1
//     from Assets/Core/Input/InputControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputControls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputControls"",
    ""maps"": [
        {
            ""name"": ""TapToSceen"",
            ""id"": ""e7a443bd-3271-4f0e-a8d7-055ebb7f1ee8"",
            ""actions"": [
                {
                    ""name"": ""TapToScreen"",
                    ""type"": ""Button"",
                    ""id"": ""e1fff8a5-173c-42c9-a6e5-e78ceaccfd94"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MouseRghtButton"",
                    ""type"": ""Button"",
                    ""id"": ""ca93d4bc-35a8-4045-95dc-0a1a7118f5b1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""4acca385-6979-4845-b9b6-39206d203c30"",
                    ""path"": ""<Touchscreen>/Press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TapToScreen"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e8902d4f-2e1e-499e-82df-ffd7b39278db"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TapToScreen"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8e9334d2-9f61-4771-85fd-36fae5103671"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MouseRghtButton"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // TapToSceen
        m_TapToSceen = asset.FindActionMap("TapToSceen", throwIfNotFound: true);
        m_TapToSceen_TapToScreen = m_TapToSceen.FindAction("TapToScreen", throwIfNotFound: true);
        m_TapToSceen_MouseRghtButton = m_TapToSceen.FindAction("MouseRghtButton", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // TapToSceen
    private readonly InputActionMap m_TapToSceen;
    private List<ITapToSceenActions> m_TapToSceenActionsCallbackInterfaces = new List<ITapToSceenActions>();
    private readonly InputAction m_TapToSceen_TapToScreen;
    private readonly InputAction m_TapToSceen_MouseRghtButton;
    public struct TapToSceenActions
    {
        private @InputControls m_Wrapper;
        public TapToSceenActions(@InputControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @TapToScreen => m_Wrapper.m_TapToSceen_TapToScreen;
        public InputAction @MouseRghtButton => m_Wrapper.m_TapToSceen_MouseRghtButton;
        public InputActionMap Get() { return m_Wrapper.m_TapToSceen; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(TapToSceenActions set) { return set.Get(); }
        public void AddCallbacks(ITapToSceenActions instance)
        {
            if (instance == null || m_Wrapper.m_TapToSceenActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_TapToSceenActionsCallbackInterfaces.Add(instance);
            @TapToScreen.started += instance.OnTapToScreen;
            @TapToScreen.performed += instance.OnTapToScreen;
            @TapToScreen.canceled += instance.OnTapToScreen;
            @MouseRghtButton.started += instance.OnMouseRghtButton;
            @MouseRghtButton.performed += instance.OnMouseRghtButton;
            @MouseRghtButton.canceled += instance.OnMouseRghtButton;
        }

        private void UnregisterCallbacks(ITapToSceenActions instance)
        {
            @TapToScreen.started -= instance.OnTapToScreen;
            @TapToScreen.performed -= instance.OnTapToScreen;
            @TapToScreen.canceled -= instance.OnTapToScreen;
            @MouseRghtButton.started -= instance.OnMouseRghtButton;
            @MouseRghtButton.performed -= instance.OnMouseRghtButton;
            @MouseRghtButton.canceled -= instance.OnMouseRghtButton;
        }

        public void RemoveCallbacks(ITapToSceenActions instance)
        {
            if (m_Wrapper.m_TapToSceenActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ITapToSceenActions instance)
        {
            foreach (var item in m_Wrapper.m_TapToSceenActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_TapToSceenActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public TapToSceenActions @TapToSceen => new TapToSceenActions(this);
    public interface ITapToSceenActions
    {
        void OnTapToScreen(InputAction.CallbackContext context);
        void OnMouseRghtButton(InputAction.CallbackContext context);
    }
}
